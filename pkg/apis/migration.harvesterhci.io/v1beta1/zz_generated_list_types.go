/*
Copyright 2024 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=migration.harvesterhci.io
package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// OpenstackSourceList is a list of OpenstackSource resources
type OpenstackSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []OpenstackSource `json:"items"`
}

func NewOpenstackSource(namespace, name string, obj OpenstackSource) *OpenstackSource {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("OpenstackSource").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VirtualMachineImportList is a list of VirtualMachineImport resources
type VirtualMachineImportList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []VirtualMachineImport `json:"items"`
}

func NewVirtualMachineImport(namespace, name string, obj VirtualMachineImport) *VirtualMachineImport {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("VirtualMachineImport").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// VmwareSourceList is a list of VmwareSource resources
type VmwareSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []VmwareSource `json:"items"`
}

func NewVmwareSource(namespace, name string, obj VmwareSource) *VmwareSource {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("VmwareSource").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}
