/*
Copyright 2024 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	v1beta1 "github.com/harvester/vm-import-controller/pkg/apis/migration.harvesterhci.io/v1beta1"
	"github.com/rancher/lasso/pkg/client"
	"github.com/rancher/lasso/pkg/controller"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type OpenstackSourceHandler func(string, *v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error)

type OpenstackSourceController interface {
	generic.ControllerMeta
	OpenstackSourceClient

	OnChange(ctx context.Context, name string, sync OpenstackSourceHandler)
	OnRemove(ctx context.Context, name string, sync OpenstackSourceHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() OpenstackSourceCache
}

type OpenstackSourceClient interface {
	Create(*v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error)
	Update(*v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error)
	UpdateStatus(*v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1beta1.OpenstackSource, error)
	List(namespace string, opts metav1.ListOptions) (*v1beta1.OpenstackSourceList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.OpenstackSource, err error)
}

type OpenstackSourceCache interface {
	Get(namespace, name string) (*v1beta1.OpenstackSource, error)
	List(namespace string, selector labels.Selector) ([]*v1beta1.OpenstackSource, error)

	AddIndexer(indexName string, indexer OpenstackSourceIndexer)
	GetByIndex(indexName, key string) ([]*v1beta1.OpenstackSource, error)
}

type OpenstackSourceIndexer func(obj *v1beta1.OpenstackSource) ([]string, error)

type openstackSourceController struct {
	controller    controller.SharedController
	client        *client.Client
	gvk           schema.GroupVersionKind
	groupResource schema.GroupResource
}

func NewOpenstackSourceController(gvk schema.GroupVersionKind, resource string, namespaced bool, controller controller.SharedControllerFactory) OpenstackSourceController {
	c := controller.ForResourceKind(gvk.GroupVersion().WithResource(resource), gvk.Kind, namespaced)
	return &openstackSourceController{
		controller: c,
		client:     c.Client(),
		gvk:        gvk,
		groupResource: schema.GroupResource{
			Group:    gvk.Group,
			Resource: resource,
		},
	}
}

func FromOpenstackSourceHandlerToHandler(sync OpenstackSourceHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1beta1.OpenstackSource
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1beta1.OpenstackSource))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *openstackSourceController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1beta1.OpenstackSource))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateOpenstackSourceDeepCopyOnChange(client OpenstackSourceClient, obj *v1beta1.OpenstackSource, handler func(obj *v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error)) (*v1beta1.OpenstackSource, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *openstackSourceController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controller.RegisterHandler(ctx, name, controller.SharedControllerHandlerFunc(handler))
}

func (c *openstackSourceController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), handler))
}

func (c *openstackSourceController) OnChange(ctx context.Context, name string, sync OpenstackSourceHandler) {
	c.AddGenericHandler(ctx, name, FromOpenstackSourceHandlerToHandler(sync))
}

func (c *openstackSourceController) OnRemove(ctx context.Context, name string, sync OpenstackSourceHandler) {
	c.AddGenericHandler(ctx, name, generic.NewRemoveHandler(name, c.Updater(), FromOpenstackSourceHandlerToHandler(sync)))
}

func (c *openstackSourceController) Enqueue(namespace, name string) {
	c.controller.Enqueue(namespace, name)
}

func (c *openstackSourceController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controller.EnqueueAfter(namespace, name, duration)
}

func (c *openstackSourceController) Informer() cache.SharedIndexInformer {
	return c.controller.Informer()
}

func (c *openstackSourceController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *openstackSourceController) Cache() OpenstackSourceCache {
	return &openstackSourceCache{
		indexer:  c.Informer().GetIndexer(),
		resource: c.groupResource,
	}
}

func (c *openstackSourceController) Create(obj *v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error) {
	result := &v1beta1.OpenstackSource{}
	return result, c.client.Create(context.TODO(), obj.Namespace, obj, result, metav1.CreateOptions{})
}

func (c *openstackSourceController) Update(obj *v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error) {
	result := &v1beta1.OpenstackSource{}
	return result, c.client.Update(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *openstackSourceController) UpdateStatus(obj *v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error) {
	result := &v1beta1.OpenstackSource{}
	return result, c.client.UpdateStatus(context.TODO(), obj.Namespace, obj, result, metav1.UpdateOptions{})
}

func (c *openstackSourceController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.client.Delete(context.TODO(), namespace, name, *options)
}

func (c *openstackSourceController) Get(namespace, name string, options metav1.GetOptions) (*v1beta1.OpenstackSource, error) {
	result := &v1beta1.OpenstackSource{}
	return result, c.client.Get(context.TODO(), namespace, name, result, options)
}

func (c *openstackSourceController) List(namespace string, opts metav1.ListOptions) (*v1beta1.OpenstackSourceList, error) {
	result := &v1beta1.OpenstackSourceList{}
	return result, c.client.List(context.TODO(), namespace, result, opts)
}

func (c *openstackSourceController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.client.Watch(context.TODO(), namespace, opts)
}

func (c *openstackSourceController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (*v1beta1.OpenstackSource, error) {
	result := &v1beta1.OpenstackSource{}
	return result, c.client.Patch(context.TODO(), namespace, name, pt, data, result, metav1.PatchOptions{}, subresources...)
}

type openstackSourceCache struct {
	indexer  cache.Indexer
	resource schema.GroupResource
}

func (c *openstackSourceCache) Get(namespace, name string) (*v1beta1.OpenstackSource, error) {
	obj, exists, err := c.indexer.GetByKey(namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(c.resource, name)
	}
	return obj.(*v1beta1.OpenstackSource), nil
}

func (c *openstackSourceCache) List(namespace string, selector labels.Selector) (ret []*v1beta1.OpenstackSource, err error) {

	err = cache.ListAllByNamespace(c.indexer, namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.OpenstackSource))
	})

	return ret, err
}

func (c *openstackSourceCache) AddIndexer(indexName string, indexer OpenstackSourceIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1beta1.OpenstackSource))
		},
	}))
}

func (c *openstackSourceCache) GetByIndex(indexName, key string) (result []*v1beta1.OpenstackSource, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1beta1.OpenstackSource, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1beta1.OpenstackSource))
	}
	return result, nil
}

type OpenstackSourceStatusHandler func(obj *v1beta1.OpenstackSource, status v1beta1.OpenstackSourceStatus) (v1beta1.OpenstackSourceStatus, error)

type OpenstackSourceGeneratingHandler func(obj *v1beta1.OpenstackSource, status v1beta1.OpenstackSourceStatus) ([]runtime.Object, v1beta1.OpenstackSourceStatus, error)

func RegisterOpenstackSourceStatusHandler(ctx context.Context, controller OpenstackSourceController, condition condition.Cond, name string, handler OpenstackSourceStatusHandler) {
	statusHandler := &openstackSourceStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromOpenstackSourceHandlerToHandler(statusHandler.sync))
}

func RegisterOpenstackSourceGeneratingHandler(ctx context.Context, controller OpenstackSourceController, apply apply.Apply,
	condition condition.Cond, name string, handler OpenstackSourceGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &openstackSourceGeneratingHandler{
		OpenstackSourceGeneratingHandler: handler,
		apply:                            apply,
		name:                             name,
		gvk:                              controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterOpenstackSourceStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type openstackSourceStatusHandler struct {
	client    OpenstackSourceClient
	condition condition.Cond
	handler   OpenstackSourceStatusHandler
}

func (a *openstackSourceStatusHandler) sync(key string, obj *v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type openstackSourceGeneratingHandler struct {
	OpenstackSourceGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *openstackSourceGeneratingHandler) Remove(key string, obj *v1beta1.OpenstackSource) (*v1beta1.OpenstackSource, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1beta1.OpenstackSource{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *openstackSourceGeneratingHandler) Handle(obj *v1beta1.OpenstackSource, status v1beta1.OpenstackSourceStatus) (v1beta1.OpenstackSourceStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.OpenstackSourceGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
